import random
import math
import numpy as np

def random_speed_of_sound():
    # Rango de temperatura en ¬∞C
    temp = random.uniform(0, 30)
    # Rango de salinidad en ppt
    salinity = random.uniform(30, 40)
    # Rango de profundidad en metros
    depth = random.uniform(0, 1000)
    # depth = 100
    
    # Ecuaci√≥n de Mackenzie para calcular la velocidad del sonido en el agua
    v = (1448.96 + 4.591 * temp - 5.304e-2 * temp**2 + 2.374e-4 * temp**3 + 
         1.340 * (salinity - 35) + 1.630e-2 * depth + 1.675e-7 * depth**2 - 
         1.025e-2 * temp * (salinity - 35) - 7.139e-13 * temp * depth**3)
    
    return v, temp, salinity, depth

# Ejemplo de uso:
velocidad, temp, sal, prof = random_speed_of_sound()
print(f"Velocidad del sonido: {velocidad:.2f} m/s a {temp:.2f}¬∞C, {sal:.2f} ppt, {prof:.2f} m")


# Para calcular el tiempo de propagaci√≥n de una se√±al ac√∫stica en un entorno subacu√°tico, se puede usar la f√≥rmula
# t = d / v
#donde:
# ùë° = es el tiempo de propagaci√≥n (en segundos),
# ùëë = es la distancia entre el emisor y el receptor (en metros),
# ùë£ = es la velocidad del sonido en el agua (en metros por segundo).
# La velocidad del sonido en el agua puede variar dependiendo de la temperatura, la salinidad y la presi√≥n.

def propagation_time(dist, speed=1500):
    """
    Calcula el tiempo de propagaci√≥n de una se√±al ac√∫stica.
    
    Par√°metros:
    - dist: Distancia en metros entre el emisor y el receptor.
    - speed: Velocidad del sonido en el agua (por defecto 1500 m/s).
    
    Retorna:
    - Tiempo de propagaci√≥n en segundos.
    """
    if dist <= 0:
        return 0  # Evitar valores negativos o nulos de distancia
    
    # Se calcula la velocidad del sonido de acuerdo a la formula de Mackenzie
    speed, temp, sal, prof = random_speed_of_sound()
    # print(f"Velocidad calculada con la formula de Mackenzie: {velocidad:.2f} m/s a {temp:.2f}¬∞C, {sal:.2f} ppt, {prof:.2f} m")

    return dist / speed

distancia = 500  # Distancia en metros
tiempo = propagation_time(distancia)
print(f"El tiempo de propagaci√≥n es {tiempo:.2f} segundos")


# Donde Œ± tiene unidades de dB¬∑km-1 y f es la frecuencia de la se√±al en kHz. El √∫ltimo
# t√©rmino es una correcci√≥n que tiene en cuenta la absorci√≥n a muy baja frecuencia,
# siendo esta ecuaci√≥n v√°lida para temperaturas de 4¬∫C y una profundidad de 900 m,
# que es donde se tomaron las medidas [2]. 

def thorp_absorption(frequency_khz):
    fsq = frequency_khz * frequency_khz
    # F√≥rmula de Thorp para calcular absorci√≥n en dB/km
    if (frequency_khz >= 0.4):
        # alpha = (0.11 * frequency_khz**2) / (1 + frequency_khz**2) + (44 * frequency_khz**2) / (4100 + frequency_khz) + 2.75e-4 * frequency_khz**2 + 0.003
        # alpha = (0.11 * frequency_khz**2) / (1 + frequency_khz**2) + (44 * frequency_khz**2) / (4100 + frequency_khz) + (2.75 * 10**-4) * frequency_khz**2 + 0.003
        alpha = (0.11 * fsq / (1 + fsq) + 44 * fsq / (4100 + fsq) + 2.75e-4 * fsq + 0.003)
    else:
        alpha = 0.002 + 0.11 * (frequency_khz / (1 + frequency_khz)) + 0.011 * frequency_khz
    return alpha

# Ejemplo de uso:
frecuencia = 20  # Frecuencia en kHz

absorcion = thorp_absorption(frecuencia)

print(f"Absorci√≥n ac√∫stica a {frecuencia} kHz: {absorcion:.2f} dB/km")

# Spreading Factor
# El spreading factor es otra contribuci√≥n a la p√©rdida de se√±al y depende de la geometr√≠a de propagaci√≥n. Existen dos tipos principales:
# Esf√©rico (spreading = 2): Se asume en propagaci√≥n en campo abierto (una se√±al se expande en todas las direcciones).
# Cil√≠ndrico (spreading = 1): Para ambientes donde la se√±al se propaga en capas, como en canales subacu√°ticos.
# An√°lisis
# Para obtener el total de p√©rdidas en dB:

# ùêø = 20 log b10 (ùëë) + ùõº ‚ãÖ ùëë
# L = 10 log b10 (ùëë) + ùõº ‚ãÖ ùëë

# donde:
# ùêø = es la p√©rdida total (dB),
# ùëë = es la distancia (en km),
# ùõº = es la p√©rdida de absorci√≥n por kil√≥metro (dB/km).
# El spreading factor ( 20 log 10 ( ùëë ) representa las p√©rdidas geom√©tricas, y la absorci√≥n ac√∫stica ùõº se suma para calcular las p√©rdidas totales.

##
# El spreading factor proviene de las caracter√≠sticas de propagaci√≥n de ondas en el medio subacu√°tico y se utiliza en la ecuaci√≥n de transmisi√≥n ac√∫stica para modelar las p√©rdidas geom√©tricas. Se basa en el tipo de expansi√≥n de la onda:
# Esf√©rico (3D spreading): Ocurre cuando la se√±al se propaga en todas las direcciones, como en un entorno sin barreras. La p√©rdida es proporcional a 
# 20 log b10 (10)
# Cil√≠ndrico (2D spreading): Se da en entornos como canales ac√∫sticos, donde la propagaci√≥n es limitada horizontalmente, con p√©rdidas de 
# 10 log b10 (d)

# spherical -> 2
# cylindrical -> 1
# mixed -> 1.5

import numpy as np

def spreading_loss(distance, spreading_type):
    """
    Calcula la p√©rdida por dispersi√≥n (spreading loss) para una se√±al ac√∫stica.

    Parameters:
    - distance (float): La distancia de propagaci√≥n en metros.
    - spreading_type (str): Tipo de dispersi√≥n ('spherical' para esf√©rico o 'cylindrical' para cil√≠ndrico).
    
    Returns:
    - float: P√©rdida en dB.
    """
    if spreading_type == 2:
        return 20 * np.log10(distance)  # P√©rdida esf√©rica
    elif spreading_type == 1:
        return 10 * np.log10(distance)  # P√©rdida cil√≠ndrica
    elif spreading_type == 1.5:
        return 15 * np.log10(distance)  # P√©rdida mixta
    else:
        raise ValueError("Tipo de dispersi√≥n no v√°lido. Use 'spherical' o 'cylindrical'.")


def compute_path_loss(frequency_khz: float, distance: float, spread_coef: float = 1.5):
        """
        Calcula la p√©rdida de propagaci√≥n en el canal ac√∫stico submarino.
        :param propagation_speed: Velocidad de propagaci√≥n del sonido en el agua (m/s)
        :param frequency: Frecuencia en Hz
        :param distance: Distancia en metros
        :return: P√©rdida de propagaci√≥n en factor de fracci√≥n (no en dB)
        # """
        # attenuation_db = (self.spread_coef * 10.0 * math.log10(distance) +
        #                   (distance / 1000.0) * self.get_atten_db_km(frequency / 1000.0))
        
        attenuation_db = spreading_loss(distance, spread_coef) +  (distance/1000.0) * thorp_absorption(frequency_khz)

        # print(" attenuation_db : ", attenuation_db)

        return attenuation_db, 10 ** (-attenuation_db / 10)  # Conversi√≥n de dB a fracci√≥n


def compute_range(frequency: float, loss: float):
    """
    Calcula el alcance m√°ximo basado en la frecuencia y la p√©rdida de se√±al.
    :param propagation_speed: Velocidad de propagaci√≥n del sonido en el agua (m/s)
    :param frequency: Frecuencia en Hz
    :param loss: Factor de p√©rdida permitido
    :return: Distancia m√°xima en metros
    """
    att = 10 ** (-thorp_absorption(frequency) / 10)  # Conversi√≥n de dB a fracci√≥n
    distance = 1000 * loss / att
    return distance


# Ejemplo de uso:
# distancia = 1500  # metros
print(f"P√©rdida esf√©rica: {spreading_loss(distancia, 2)} dB")
print(f"P√©rdida cil√≠ndrica: {spreading_loss(distancia, 1)} dB")
print(f"P√©rdida mixta: {spreading_loss(distancia, 1.5)} dB")


print(f"Perdida total path_loss (spherical) : ", compute_path_loss(frecuencia, distancia, 2))
print(f"Perdida total path_loss (cylindrical) : ", compute_path_loss(frecuencia, distancia, 1))
print(f"Perdida total path_loss (mixta) : ", compute_path_loss(frecuencia, distancia, 1.5))

# Ejemplo de c√°lculo del rango m√°ximo
loss = 1e-3  # Factor de p√©rdida permitido
print(f"Distancia m√°xima alcanzable: {compute_range(frecuencia, loss)} metros")